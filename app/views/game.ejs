<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeu en ligne</title>
    <link rel="stylesheet" type="text/css" href="css/styles.css" />
    <link rel="stylesheet" type="text/css" href="css/game.css" />
</head>
<body>
    <div id="background"></div>
    <div class="container">
        <div class="theme" id="theme"></div>
        <div class="turn-info" id="turn-info"></div>
        <div class="timer" id="timer"></div>
        <div class="center">
            <input type="text" id="game-input" placeholder="...">
        </div>
        <div class="player-list" id="player-list"></div>
    </div>
<!-- Message de victoire -->
<div class="victory-message" id="victory-message">
    <div id="victory-username"></div>
    <div id="winners-container" class="winners-container"></div>
</div>
<div class="losers-container" id="losers-container"></div>


    <script>
        const socket = new WebSocket('ws://localhost:3000');
        const gameCode = '<%= gameCode %>';
        const username = sessionStorage.getItem('username');
        const uuid = sessionStorage.getItem('uuid');
        let currentPlayer = '';
        let angleOffset = 0; // Offset de rotation
        let currentPlayers = [];
        let generalPlayers = []; // restera la même tout le temps
        let deadPlayers = [];
        let countdownInterval; 
        let gameEnCours = 1;
    
        console.log('Game code:', gameCode);
        console.log('Username:', username);

        socket.addEventListener('open', function(event) {
            console.log('Connecté au serveur de jeu');
            socket.send(JSON.stringify({ type: 'request_game_users', gameCode: gameCode }));
        });

        socket.addEventListener('message', function(event) {
            const msg = JSON.parse(event.data);

            if (msg.type.type != "text_update"){console.log('Message reçu:', msg);}

            switch(msg.type) {
                case 'game_users':
                    displayPlayers(msg.users);
                    generalPlayers = msg.users.slice();
                    currentPlayers = msg.users.slice();
                    console.log("game_users : currentPlayers:", currentPlayers)
                    document.getElementById('theme').innerText = `Thème : ${msg.theme}`;
                    currentPlayer = currentPlayers[0].username;
                    document.getElementById('turn-info').innerText = `C'est au tour de ${currentPlayer}`;
                    toggleInput(currentPlayer === username);
                    startCountdown(5);
                    break;
                case 'turn_success':
                    if (msg.gameCode === gameCode) {
                        updateTextInput("");
                        addBackgroundImage(msg.text);
                        currentPlayer = msg.currentPlayer;
                        document.getElementById('turn-info').innerText = `C'est au tour de ${currentPlayer}`;
                        toggleInput(currentPlayer === username);
                        animateRotation(Math.PI * 2 / currentPlayers.length);
                        startCountdown(10);
                    }
                    break;
                case 'text_update':
                    if ((msg.username !== username) && (msg.gameCode === gameCode)) {
                        updateTextInput(msg.text);
                    }
                    break;
                case 'kill':
                    if (msg.gameCode === gameCode) {
                        updateTextInput("");


                        handleKill(msg.index);
                        currentPlayer = msg.currentPlayer;
                        document.getElementById('turn-info').innerText = `C'est au tour de ${currentPlayer}`;
                        toggleInput(currentPlayer === username);
                        // animateRotation(Math.PI * 2 / currentPlayers.length);
                        displayPlayers(currentPlayers)
                        startCountdown(10);
                    }
                    break;
                case 'solo_win':
                    if (msg.gameCode === gameCode) {
                        const victoryMessage = document.getElementById('victory-message');
                        const victoryUsername = document.getElementById('victory-username');
                        const victoryAvatar = document.getElementById('victory-avatar');

                        victoryUsername.innerText = `Victoire de : ${msg.username}`;
                        victoryAvatar.src = msg.avatar;

                        const losersContainer = document.getElementById('losers-container');
                        losersContainer.innerHTML = '';

                        // Afficher les avatars des loosers
                        msg.loserAvatars.forEach(avatarUrl => {
                            const loserAvatar = document.createElement('img');
                            loserAvatar.src = avatarUrl;
                            loserAvatar.classList.add('loser-avatar');
                            losersContainer.appendChild(loserAvatar);
                        });

                        // Afficher le message de victoire et l'avatar au milieu de l'écran
                        victoryMessage.style.display = 'block';

                        // Cacher les autres éléments du jeu
                        document.querySelector('.container').style.display = 'none';
                    }
                    break;
                    case 'multi_win':
                    gameEnCours = 0;
    if (msg.gameCode === gameCode) {
        const victoryMessage = document.getElementById('victory-message');
        const victoryUsername = document.getElementById('victory-username');
        const winnersContainer = document.getElementById('winners-container');
        const losersContainer = document.getElementById('losers-container');

        victoryUsername.innerText = `Victoire de : ${msg.username.join(', ')}`;
        winnersContainer.innerHTML = '';
        losersContainer.innerHTML = '';

        // Afficher les avatars des gagnants
        msg.winnerAvatars.forEach(avatarUrl => {
            const winnerAvatar = document.createElement('img');
            winnerAvatar.src = avatarUrl;
            winnerAvatar.classList.add('winner-avatar');
            winnersContainer.appendChild(winnerAvatar);
        });

        // Afficher les avatars des perdants
        msg.loserAvatars.forEach(avatarUrl => {
            const loserAvatar = document.createElement('img');
            loserAvatar.src = avatarUrl;
            loserAvatar.classList.add('loser-avatar');
            losersContainer.appendChild(loserAvatar);
        });

        // Afficher le message de victoire et les avatars des gagnants au milieu de l'écran
        victoryMessage.style.display = 'block';

        // Cacher les autres éléments du jeu
        document.querySelector('.container').style.display = 'none';
    }
    break;
                default:
                    console.log('Type de message non pris en charge:', msg.type);
                    break;
            }
        });

        socket.addEventListener('close', function(event) {
            console.log('Déconnecté du serveur de jeu');
        });

        document.getElementById('game-input').addEventListener('input', function(e) {
            if (currentPlayer === username) {
                socket.send(JSON.stringify({
                    type: 'text_update',
                    text: e.target.value,
                    gameCode: gameCode,
                    username: username
                }));
            }
        });

        document.getElementById('game-input').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && currentPlayer === username) {
                socket.send(JSON.stringify({
                    type: 'send_answer',
                    gameCode: gameCode,
                    username: username,
                    text: e.target.value
                }));
            }
        });

        function startCountdown(seconds) {
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            let remainingTime = seconds;
            document.getElementById('timer').innerText = remainingTime;

            countdownInterval = setInterval(() => {
                remainingTime--;
                document.getElementById('timer').innerText = remainingTime;

                if (remainingTime <= 0) {
                    clearInterval(countdownInterval);
                    if ((currentPlayer === username) && (gameEnCours == 1)) {socket.send(JSON.stringify({ type: 'looser', gameCode: gameCode, username: username }));}
                }
            }, 1000);
        }


        function updateTextInput(text) {document.getElementById('game-input').value = text;}
        function toggleInput(enable) {document.getElementById('game-input').disabled = !enable;}

        function addBackgroundImage(text) {
            const img = document.createElement('img');
            img.src = `/images/entity/${text}.png`;
            img.classList.add('background-image');
            document.getElementById('background').appendChild(img);}

        function animateRotation(rotationAngle) {
            const startAngle = angleOffset;
            const targetAngle = angleOffset + rotationAngle;
            const duration = 250;
            const startTime = performance.now();
            function stepAnimation(timestamp) {
                const elapsed = timestamp - startTime;
                const progress = Math.min(elapsed / duration, 1); // Calculer le progrès de l'animation de 0 à 1
                angleOffset = startAngle + progress * (targetAngle - startAngle); // Interpolation linéaire

                displayPlayers(currentPlayers); // Mettre à jour l'affichage avec la nouvelle rotation

                if (progress < 1) {
                    requestAnimationFrame(stepAnimation); // Continuer l'animation tant que ce n'est pas terminé
                }
            }
            requestAnimationFrame(stepAnimation); // Démarrer l'animation
        }

        function displayPlayers(players) {
            const container = document.querySelector('.container');
            const center = { x: container.clientWidth / 2, y: container.clientHeight / 2 };
            const radius = 250;
            const angleStep = 2 * Math.PI / players.length;
            const startAngle = Math.PI / 2; // Commence à partir du bas
            container.querySelectorAll('.avatar').forEach(avatar => avatar.remove()); // Supprimer les anciens avatars

            players.forEach((player, index) => {
                const angle = startAngle - index * angleStep + angleOffset;
                const x = center.x + radius * Math.cos(angle) - 25;
                const y = center.y + radius * Math.sin(angle) - 25;

                let avatar = document.createElement('img');
                avatar.src = player.avatar;
                avatar.classList.add('avatar');
                avatar.style.left = `${x}px`;
                avatar.style.top = `${y}px`;
                container.appendChild(avatar);
            });
        }

        function handleKill(index) {
            const killedPlayer = generalPlayers[index];
            const playerList = document.getElementById('player-list');

            if (killedPlayer) {

                let avatar = document.createElement('img');
                avatar.src = killedPlayer.avatar;
                avatar.classList.add('eliminated-player');

                playerList.appendChild(avatar);


                const uuid = killedPlayer.uuid;
                currentPlayers = currentPlayers.filter(player => player.uuid !== uuid);
                deadPlayers.push(killedPlayer);

                displayPlayers(currentPlayers);
            } else {
                console.error('[handleKill] Problème d\'index :', index);
            }
        }



    </script>
</body>
</html>
