<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeu en ligne</title>
    <link rel="stylesheet" type="text/css" href="css/styles.css" />
    <link rel="stylesheet" type="text/css" href="css/game.css" />
    
</head>
<body>
    <div id="background"></div>
    <div class="container">
        <div class="theme" id="theme"></div>
        <div class="turn-info" id="turn-info"></div>
        <div class="timer" id="timer"></div>
        <div class="center">
            <input type="text" id="game-input" placeholder="Votre texte ici...">
        </div>
        <div class="player-list" id="player-list"></div>
    </div>

    <script>
        const socket = new WebSocket('ws://localhost:3000');
        const gameCode = '<%= gameCode %>';
        const username = sessionStorage.getItem('username');
        const uuid = sessionStorage.getItem('uuid');
        let currentPlayer = '';
        let angleOffset = 0; // Offset de rotation
        let currentPlayers = [];

        console.log('Game code:', gameCode);
        console.log('Username:', username);

        socket.addEventListener('open', function(event) {
            console.log('Connecté au serveur de jeu');
            socket.send(JSON.stringify({ type: 'request_game_users', gameCode: gameCode }));
        });

        socket.addEventListener('message', function(event) {
            const msg = JSON.parse(event.data);
            console.log('Message reçu:', msg);

            switch(msg.type) {
                case 'game_users':
                    displayPlayers(msg.users);
                    currentPlayers = msg.users;
                    document.getElementById('theme').innerText = `Thème : ${msg.theme}`;
                    currentPlayer = currentPlayers[0].username;
                    turnEndTime = 5000;
                    document.getElementById('turn-info').innerText = `C'est au tour de ${currentPlayer}`;
                    toggleInput(currentPlayer === username);
                    break;
                case 'turn_success':
                    if (msg.gameCode === gameCode) {
                        addBackgroundImage(msg.text);  // Ajout de l'image de fond
                        currentPlayer = msg.currentPlayer;
                        document.getElementById('turn-info').innerText = `C'est au tour de ${currentPlayer}`;
                        toggleInput(currentPlayer === username);
                        animateRotation(Math.PI * 2 / currentPlayers.length);
                    }
                    break;
                case 'text_update':
                    if ((msg.username !== username) && (msg.gameCode == gameCode)) {
                        updateTextInput(msg.text);
                    }
                    break;
                default:
                    console.log('Type de message non pris en charge:', msg.type);
                    break;
            }
        });

        socket.addEventListener('close', function(event) {
            console.log('Déconnecté du serveur de jeu');
        });

        document.getElementById('game-input').addEventListener('input', function(e) {
            console.log('Input event detected');
            if (currentPlayer === username) {
                console.log('Sending text update:', e.target.value);
                socket.send(JSON.stringify({
                    type: 'text_update',
                    text: e.target.value,
                    gameCode: gameCode,
                    username: username
                }));
            } else {
                console.log('Text input ignored, not your turn');
            }
        });

        document.getElementById('game-input').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                console.log('Enter key pressed');
                if (currentPlayer === username) {
                    socket.send(JSON.stringify({
                        type: 'send_answer',
                        gameCode: gameCode,
                        username: username,
                        text: document.getElementById('game-input').value 
                    }));
                } else {
                    console.log('Enter key press ignored, not your turn');
                }
            }
        });

        function updateTextInput(text) {
            document.getElementById('game-input').value = text;
        }

        function toggleInput(enable) {
            document.getElementById('game-input').disabled = !enable;
        }

        function addBackgroundImage(text) {
            const img = document.createElement('img');
            img.src = `/images/entity/${text}.png`;
            img.classList.add('background-image');
            document.getElementById('background').appendChild(img);
        }

        function animateRotation(rotationAngle) {
            const startAngle = angleOffset;
            const targetAngle = angleOffset + rotationAngle;
            const duration = 250;
            const startTime = performance.now();

            function stepAnimation(timestamp) {
                const elapsed = timestamp - startTime;
                const progress = Math.min(elapsed / duration, 1); // Calculer le progrès de l'animation de 0 à 1
                angleOffset = startAngle + progress * (targetAngle - startAngle); // Interpolation linéaire

                displayPlayers(currentPlayers); // Mettre à jour l'affichage avec la nouvelle rotation

                if (progress < 1) {
                    requestAnimationFrame(stepAnimation); // Continuer l'animation tant que ce n'est pas terminé
                }
            }
            requestAnimationFrame(stepAnimation); // Démarrer l'animation
        }

        function displayPlayers(players) {
            currentPlayers = players; // Mettre à jour les joueurs actuels
            const container = document.querySelector('.container');
            const playerList = document.getElementById('player-list');
            const center = { x: container.clientWidth / 2, y: container.clientHeight / 2 };
            const radius = 300;
            const angleStep = 2 * Math.PI / players.length;
            const startAngle = Math.PI / 2; // Commence à partir du bas

            playerList.innerHTML = '';
            container.querySelectorAll('.avatar').forEach(avatar => avatar.remove()); // Supprimer les anciens avatars

            players.forEach((player, index) => {
                const angle = startAngle + index * angleStep + angleOffset;
                const x = center.x + radius * Math.cos(angle) - 25;
                const y = center.y + radius * Math.sin(angle) - 25;

                const avatar = document.createElement('img');
                avatar.src = player.avatar;
                avatar.classList.add('avatar');
                avatar.style.left = `${x}px`;
                avatar.style.top = `${y}px`;
                container.appendChild(avatar);

                const playerItem = document.createElement('div');
                playerItem.innerText = `${player.username}`;
                playerList.appendChild(playerItem);
            });
        }


    </script>
</body>
</html>