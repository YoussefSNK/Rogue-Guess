<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat en ligne</title>
    <link rel="stylesheet" type="text/css" href="css/styles.css" />
</head>

<body>
    <div class="container">
        <div class="red" id="image-container"></div>
        <div class="green">Logs</div>
        <div class="blue">    
            <div class="chat-container">
                <div class="messages" id="messages"></div>
                <form id="message-form">
                    <input type="text" id="message-input" placeholder="Entrez votre message...">
                    <button type="submit">Envoyer</button>
                </form>
            </div>
        </div>
        <div class="yellow">
            <div id="firstPlayer"></div>
            <div id="otherPlayers" class="playerList"></div>
        </div>
    </div>

    <script>
        const socket = new WebSocket('ws://localhost:3000');
        const username = sessionStorage.getItem('username');
        const avatar = sessionStorage.getItem('avatar');

        function addMessageToUI(msg) {
            const messages = document.getElementById('messages');
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.innerHTML = `
                <img src="${msg.avatar || avatar}" alt="Avatar" class="avatar"> 
                <span>${msg.username || username}: ${msg.message}</span>`;
            messages.appendChild(messageElement);
            messages.scrollTop = messages.scrollHeight;
        }

        function updatePlayerList(users) {
            const firstPlayer = document.getElementById('firstPlayer');
            const otherPlayers = document.getElementById('otherPlayers');
            firstPlayer.innerHTML = '';
            otherPlayers.innerHTML = ''; // Clear the current list

            if (users.length > 0) {
                const firstUser = users[0];
                const firstPlayerElement = document.createElement('div');
                firstPlayerElement.classList.add('player');
                firstPlayerElement.innerHTML = `
                    <img src="${firstUser.avatar}" alt="Avatar">
                    <div>${firstUser.username}</div>`;
                firstPlayer.appendChild(firstPlayerElement);

                const otherUsers = users.slice(1);
                otherUsers.forEach(user => {
                    const playerElement = document.createElement('div');
                    playerElement.classList.add('player');
                    playerElement.innerHTML = `
                        <img src="${user.avatar}" alt="Avatar">
                        <div>${user.username}</div>`;
                    otherPlayers.appendChild(playerElement);
                });
            }
        }


        function loadListImages() {
            fetch('/api/requests')
                .then(response => response.json())
                .then(images => {
                    const imageContainer = document.getElementById('image-container');
                    imageContainer.innerHTML = ''; // Clear the container before adding new images
                    images.forEach(image => {
                        const titleElement = document.createElement('h3');
                        titleElement.innerText = image.Title; // Add the title text

                        const imgElement = document.createElement('img');
                        imgElement.src = "images/list_icons/" + image.Image;
                        imgElement.alt = "Request Image";
                        imgElement.classList.add('request-image');
                        imgElement.addEventListener('click', () => {
                            socket.send(JSON.stringify({
                                type: 'start_game',
                                uuid: sessionStorage.getItem('uuid'),
                                theme: image.Image.replace('.png', '')
                            }));
                        });

                        const container = document.createElement('div');
                        container.classList.add('image-container');
                        container.appendChild(titleElement);
                        container.appendChild(imgElement);
                        imageContainer.appendChild(container);
                    });
                })
            .catch(error => console.error('Erreur lors du chargement des images:', error));
        }


        document.addEventListener('DOMContentLoaded', loadListImages);

        socket.addEventListener('message', function(event) {
            const msg = JSON.parse(event.data);
            if (msg.type === 'chat_message') {
                addMessageToUI(msg);
            } else if (msg.type === 'user_list') {
                updatePlayerList(msg.users);
            } else if (msg.type === 'user_disconnected') {
                const messages = document.getElementById('messages');
                const disconnectMessageElement = document.createElement('div');
                disconnectMessageElement.classList.add('disconnect-message');
                disconnectMessageElement.textContent = `${msg.username} s'est déconnecté`;
                messages.appendChild(disconnectMessageElement);
                messages.scrollTop = messages.scrollHeight;
            } else if (msg.type === 'redirect_game') {
                window.location.href = `/game?gameCode=${msg.gameCode}`;
            }
        });

        document.getElementById('message-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            if (message !== '') {
                socket.send(JSON.stringify({
                    type: 'chat_message',
                    message: message,
                    username: username,
                    avatar: avatar
                }));
                input.value = '';
            }
        });

        socket.addEventListener('open', function(event) {
            console.log('Connecté au serveur depuis chat.ejs');
            socket.send(JSON.stringify({
                type: 'user_info',
                userInfo: {
                    username: username,
                    avatar: avatar,
                    uuid: sessionStorage.getItem('uuid')
                }
            }));
        });

        socket.addEventListener('close', function(event) {
            console.log('Déconnecté de chat.ejs');
        });

        const uuid = sessionStorage.getItem('uuid');

        window.addEventListener('beforeunload', function(event) {
            socket.send(JSON.stringify({
                type: 'disconnect_user',
                uuid: uuid,
                username: username,
                avatar: avatar
            }));
        });

        socket.addEventListener('error', function(event) {
            console.error('Error occurred:', event);
        });
    </script>
</body>
</html>